{"version":3,"sources":["atoms/text/Span/types/index.tsx","theme/colors.tsx","atoms/text/Span/themes/default.tsx","atoms/text/Span/themes/title.tsx","atoms/text/Span/themes/subheader.tsx","atoms/text/Span/Span.tsx","atoms/input/Button/themes/default.tsx","atoms/input/Button/types/index.tsx","atoms/input/Button/Button.tsx","atoms/div/Box.tsx","atoms/div/Flex.tsx","organisms/NavigationBar.tsx","constants/routes.tsx","atoms/text/P/P.tsx","pages/Home/Home.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["SpanTheme","colors","base","title","subheader","ThemeSelector","DEFAULT","TITLE","SUBHEADER","ThemedSpan","styled","span","props","theme","Span","children","defaultProps","ButtonTheme","ThemedButton","button","Button","Box","div","boxSizing","minWidth","space","background","backgroundImage","color","width","fontSize","flex","order","alignSelf","height","maxWidth","maxHeight","minHeight","size","position","textAlign","overflow","fontFamily","fontWeight","lineHeight","letterSpacing","zIndex","borders","Flex","display","flexWrap","flexDirection","alignItems","justifyContent","Route","NavContainer","ButtonListContainer","NavigationBar","buttonList","onClick","window","location","href","P","p","fontStyle","HomeBase","StyledImg","ROOT","Body","Home","paddingTop","marginTop","App","className","exact","path","RoutePath","HOME","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.34e17d33.chunk.js","sourcesContent":["import React from \"react\";\nimport { base, title, subheader } from \"../themes\";\n\nexport enum SpanTheme {\n  DEFAULT,\n  TITLE,\n  SUBHEADER\n}\n\nexport const ThemeSelector = {\n  [SpanTheme.DEFAULT]: base,\n  [SpanTheme.TITLE]: title,\n  [SpanTheme.SUBHEADER]: subheader\n} as const;\n\nexport interface SpanProps extends React.HTMLAttributes<HTMLSpanElement> {\n  theme: SpanTheme;\n}\n","export const colors = {\n  // shades of white\n  white: \"#FFFFFF\",\n\n  //shades of black\n  black: \"#000000\",\n\n  //shades of grey,\n  grey: \"#878787\",\n\n  //shades of yellow\n  gold: \"#E0BB00\",\n\n  //shades of red\n  red: \"#DF0808\"\n};\n","import { colors } from \"../../../../theme\";\n\nexport const base = `\n    font-size: 15px;\n    color: ${colors.red};\n`;\n","import { colors } from \"../../../../theme\";\n\nexport const title = `\n    font-family: Copperplate;\n    font-size: 60px;\n    color: black;\n    font-weight: 600;\n    width: fit-content;\n    display: inline-table;\n    width: 40vw;\n    border-bottom: solid 2px ${colors.gold};\n\n    @media only screen and (max-width: 605px) {\n        font-size: 40px;\n      }\n`;\n","import { colors } from \"../../../../theme\";\n\nexport const subheader = `\n    font-size: 20px;\n    color: ${colors.grey};\n    font-family: Copperplate;\n    margin-top: 5px;\n    font-weight: 100;\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { SpanProps, SpanTheme, ThemeSelector } from \"./types\";\n\nconst ThemedSpan = styled.span`\n  ${(props: SpanProps) => ThemeSelector[props.theme]}\n`;\n\nexport const Span = (props: SpanProps) => {\n  return <ThemedSpan {...props}>{props.children}</ThemedSpan>;\n};\n\nSpan.defaultProps = {\n  theme: SpanTheme.DEFAULT\n};\n","export const base = `\n    height: 40px;\n    background: transparent;\n    font-size: 18px;\n    border: none;\n    border-left: solid 2px black;\n    border-right: solid 2px black;\n    border-radius: 10px;\n    cursor: pointer;\n    font-family: monospace;\n\n    :hover {\n        transition: all 0.5s;\n        border-left: solid 2px #e0bb00;\n        border-right: solid 2px #e0bb00;\n        color: #878787;\n    }\n`;\n","import React from \"react\";\nimport { base } from \"../themes\";\n\nexport enum ButtonTheme {\n  DEFAULT = \"DEFAULT\"\n}\n\nexport const ThemeSelector = {\n  [ButtonTheme.DEFAULT]: base\n} as const;\n\nexport interface ButtonProps extends React.HTMLAttributes<HTMLButtonElement> {\n  theme: ButtonTheme;\n}\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { ButtonProps, ThemeSelector, ButtonTheme } from \"./types\";\n\nconst ThemedButton = styled.button`\n  ${(props: ButtonProps) => ThemeSelector[props.theme]}\n`;\n\nexport const Button = (props: React.HTMLAttributes<HTMLButtonElement>) => {\n  return <ThemedButton {...props}>{props.children}</ThemedButton>;\n};\n\nButton.defaultProps = {\n  theme: ButtonTheme.DEFAULT\n};\n","import styled from \"styled-components\";\nimport StyledSystem, {\n  space,\n  backgroundImage,\n  background,\n  color,\n  width,\n  fontSize,\n  flex,\n  order,\n  alignSelf,\n  maxWidth,\n  minWidth,\n  height,\n  maxHeight,\n  minHeight,\n  size,\n  position,\n  textAlign,\n  overflow,\n  zIndex,\n  borders,\n  fontFamily,\n  fontWeight,\n  lineHeight,\n  letterSpacing\n} from \"styled-system\";\nimport { TypographyProps } from \"../../types/styled-system\";\n//import { flexShrink, FlexShrink } from 'Theme';\n\n// abstract this so Flex and Box use it seper\nexport type BoxProps = TypographyProps &\n  StyledSystem.SpaceProps &\n  StyledSystem.BackgroundImageProps &\n  StyledSystem.BackgroundProps &\n  StyledSystem.ColorProps &\n  StyledSystem.FontSizeProps &\n  StyledSystem.OrderProps &\n  StyledSystem.AlignSelfProps &\n  StyledSystem.SizeProps &\n  StyledSystem.WidthProps &\n  StyledSystem.HeightProps &\n  StyledSystem.MaxWidthProps &\n  StyledSystem.MinWidthProps &\n  StyledSystem.MaxHeightProps &\n  StyledSystem.MinHeightProps &\n  StyledSystem.PositionProps &\n  StyledSystem.FlexProps &\n  StyledSystem.TextAlignProps &\n  StyledSystem.ZIndexProps &\n  StyledSystem.BordersProps &\n  StyledSystem.OverflowProps;\n\nexport const Box: React.FunctionComponent<BoxProps & {\n  children?: React.ReactNode;\n} & JSX.IntrinsicElements[\"div\"]> = styled.div(\n  {\n    boxSizing: \"border-box\",\n    minWidth: 0\n  },\n  space,\n  background,\n  backgroundImage,\n  color,\n  width,\n  fontSize,\n  flex,\n  order,\n  alignSelf,\n  height,\n  maxWidth,\n  minWidth,\n  maxHeight,\n  minHeight,\n  size,\n  position,\n  textAlign,\n  overflow,\n  alignSelf,\n  fontFamily,\n  fontWeight,\n  textAlign,\n  lineHeight,\n  letterSpacing,\n  zIndex,\n  borders\n  //flexShrink\n);\n","import styled from \"styled-components\";\nimport StyledSystem, {\n  flexWrap,\n  flexDirection,\n  alignItems,\n  justifyContent\n} from \"styled-system\";\nimport { Box, BoxProps } from \"./Box\";\n\nexport type FlexOnlyProps = StyledSystem.AlignItemsProps &\n  StyledSystem.FlexWrapProps &\n  StyledSystem.FlexDirectionProps &\n  StyledSystem.JustifyContentProps;\n\nexport type FlexBoxProps = FlexOnlyProps & BoxProps;\n\nexport const Flex: React.FunctionComponent<FlexBoxProps & {\n  children?: React.ReactNode;\n}> = styled(Box)(\n  {\n    display: \"flex\"\n  },\n  flexWrap,\n  flexDirection,\n  alignItems,\n  justifyContent\n);\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { Button } from \"../atoms\";\n\n// TODO: abstract as atom\nconst NavContainer = styled.div`\n  width: 325px; //calc(100% - 20px);\n  height: 52px;\n  background-color: transparent;\n  margin-top: 20px;\n  border: solid 3px black;\n  border-radius: 10px;\n  display: inline-flex;\n  box-shadow: 0px 15px 15px 0px #cfcfcf;\n`;\n\nconst ButtonListContainer = styled.div`\n  width: 100%;\n  display: inline-flex;\n  justify-content: space-evenly;\n  align-items: center;\n`;\n\nexport const NavigationBar = () => {\n  // TO DO: Abstract as molecule\n  const buttonList = [\n    <Button>Home</Button>,\n    <Button\n      onClick={() => {\n        window.location.href =\n          \"https://www.linkedin.com/in/robert-mercado-30801990/\";\n      }}\n    >\n      LinkedIn\n    </Button>,\n    <Button\n      onClick={() => {\n        window.location.href = \"https://github.com/DarkseidOmega/\";\n      }}\n    >\n      Github\n    </Button>\n  ];\n\n  return (\n    <NavContainer>\n      <ButtonListContainer>{buttonList}</ButtonListContainer>\n    </NavContainer>\n  );\n};\n","export enum Route {\n  ROOT = \"\",\n  HOME = \"/\"\n}\n","import styled from \"styled-components\";\n//import { colors } from \"Theme\";\nimport {\n  alignSelf,\n  AlignSelfProps,\n  color,\n  ColorProps,\n  flex,\n  FlexProps,\n  fontFamily,\n  fontSize,\n  fontStyle,\n  fontWeight,\n  height,\n  HeightProps,\n  letterSpacing,\n  lineHeight,\n  order,\n  OrderProps,\n  space,\n  SpaceProps,\n  textAlign,\n  TypographyProps as StyledSystemTypographyProps,\n  width,\n  WidthProps\n} from \"styled-system\";\nimport { colors } from \"../../../theme\";\n//import { themed } from 'Utils/theme.helpers';\n\nexport type TypographyProps = ColorProps & StyledSystemTypographyProps;\n\nexport type TextProps = TypographyProps &\n  AlignSelfProps &\n  FlexProps &\n  HeightProps &\n  OrderProps &\n  SpaceProps &\n  WidthProps & { htmlFor?: string };\n\nconst P = styled.p<TextProps>(\n  space,\n  width,\n  height,\n  fontSize,\n  color,\n  flex,\n  order,\n  alignSelf,\n  fontFamily,\n  fontSize,\n  fontStyle,\n  fontWeight,\n  textAlign,\n  lineHeight,\n  letterSpacing\n  //themed('text')\n);\n\nP.defaultProps = {\n  fontSize: \"15px\",\n  color: colors.black\n};\n\nexport default P;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { Flex, Span } from \"../../atoms\";\nimport { SpanTheme } from \"../../atoms/text/Span/types\";\nimport { NavigationBar } from \"../../organisms\";\nimport { Route } from \"../../constants\";\nimport P from \"../../atoms/text/P/P\";\n\n// TO DO: Abstract this\nconst HomeBase = styled.div`\n  height: 100%;\n  width: 100%;\n  background-color: white;\n  background-size: cover;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nconst StyledImg = styled.div`\n  height: calc(100vh - 120px);\n  background-size: cover !important;\n  background-repeat: no-repeat !important;\n  width: 50vw;\n  background: url(${Route.ROOT}/bestest.jpg);\n  border-top-left-radius: 150px;\n  border-bottom-left-radius: 150px;\n  transition: all 0.75s;\n\n  @media only screen and (max-width: 625px) {\n    height: unset;\n  }\n`;\n\nconst Body = styled.div`\n  padding-top: 30px;\n  display: flex;\n  flex-driection: row;\n  justify-content: space-between;\n  width: 100%;\n`;\n\nexport const Home = () => {\n  return (\n    <HomeBase>\n      <NavigationBar />\n      <Body>\n        <Flex\n          width=\"50vw\"\n          flexDirection=\"column\"\n          alignItems=\"center\"\n          paddingTop=\"50px\"\n        >\n          <Span theme={SpanTheme.TITLE}>Robert Mercado </Span>\n          <Span theme={SpanTheme.SUBHEADER}>\n            Software Engineer | Home Cook | Bourbon Drinker\n          </Span>\n          <P marginTop=\"50px\" fontFamily=\"monospace\">\n            I'm working on it...\n          </P>\n        </Flex>\n        <StyledImg />\n      </Body>\n    </HomeBase>\n  );\n};\n","import React from \"react\";\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\n\nimport \"./App.css\";\nimport { Home } from \"./pages\";\nimport { Route as RoutePath } from \"./constants\";\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <div className=\"App\">\n        <Switch>\n          <Route exact path={RoutePath.HOME}>\n            <Home />\n          </Route>\n        </Switch>\n      </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}