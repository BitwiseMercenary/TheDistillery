{"version":3,"sources":["atoms/text/Span/types/index.tsx","atoms/text/Span/themes/default.tsx","atoms/text/Span/themes/tba.tsx","atoms/text/Span/Span.tsx","organisms/NavigationBar.tsx","constants/routes.tsx","pages/Home/Home.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["SpanTheme","ThemeSelector","DEFAULT","TBA","ThemedSpan","styled","span","props","theme","Span","children","defaultProps","Route","StyledButton","button","Button","NavContainer","div","ButtonListContainer","NavigationBar","buttonList","onClick","window","location","href","HomeBase","StyledImg","ROOT","Body","Home","style","width","display","flexDirection","alignItems","paddingTop","fontSize","color","fontFamily","marginTop","fontWeight","App","className","exact","path","RoutePath","HOME","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wLAGYA,E,gGAAAA,K,kBAAAA,E,WAAAA,M,KAKL,IAAMC,GAAa,mBACvBD,EAAUE,QCTI,6CDQS,cAEvBF,EAAUG,IEVG,ySFQU,G,8EGJ1B,IAAMC,EAAaC,IAAOC,KAAV,KACZ,SAACC,GAAD,OAAsBN,EAAcM,EAAMC,UAGjCC,EAAO,SAACF,GACnB,OAAO,kBAACH,EAAeG,EAAQA,EAAMG,W,42BAGvCD,EAAKE,aAAe,CAClBH,MAAOR,EAAUE,SCTnB,ICJYU,EDINC,EAAeR,IAAOS,OAAV,KAiBZC,EAAS,SAACR,GACd,OAAO,kBAACM,EAAiBN,EAAQA,EAAMG,WAGnCM,EAAeX,IAAOY,IAAV,KAWZC,EAAsBb,IAAOY,IAAV,KAOZE,EAAgB,WAE3B,IAAMC,EAAa,CACjB,kBAAC,EAAD,aACA,kBAAC,EAAD,CACEC,QAAS,WACPC,OAAOC,SAASC,KACd,yDAHN,aAQA,kBAAC,EAAD,CACEH,QAAS,WACPC,OAAOC,SAASC,KAAO,sCAF3B,WASF,OACE,kBAACR,EAAD,KACE,kBAACE,EAAD,KAAsBE,K,6tBClEhBR,K,QAAAA,E,UAAAA,M,KCQZ,IAAMa,EAAWpB,IAAOY,IAAV,KAURS,EAAYrB,IAAOY,IAAV,IAKKL,EAAMe,MAKpBC,EAAOvB,IAAOY,IAAV,KAQGY,EAAO,WAClB,OACE,kBAACJ,EAAD,KACE,kBAAC,EAAD,MACA,kBAACG,EAAD,KACE,yBACEE,MAAO,CACLC,MAAO,OACPC,QAAS,OACTC,cAAe,SACfC,WAAY,SACZC,WAAY,SAGd,kBAAC,EAAD,CAAM3B,MAAOR,EAAUG,KAAvB,mBACA,0BACE2B,MAAO,CACLM,SAAU,OACVC,MAAO,UACPC,WAAY,cACZC,UAAW,MACXC,WAAY,MANhB,yDAWA,0BAAMV,MAAO,CAAES,UAAW,SAA1B,yBAEF,kBAACb,EAAD,SC3COe,MAdf,WACE,OACE,kBAAC,IAAD,KACE,yBAAKC,UAAU,OACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAMC,EAAUC,MAC3B,kBAAC,EAAD,WCDQC,QACW,cAA7BzB,OAAOC,SAASyB,UAEe,UAA7B1B,OAAOC,SAASyB,UAEhB1B,OAAOC,SAASyB,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.4ede89c7.chunk.js","sourcesContent":["import React from \"react\";\nimport { base, tba } from \"../themes\";\n\nexport enum SpanTheme {\n  DEFAULT = \"DEFAULT\",\n  TBA = \"TBA\"\n}\n\nexport const ThemeSelector = {\n  [SpanTheme.DEFAULT]: base,\n  [SpanTheme.TBA]: tba\n} as const;\n\nexport interface SpanProps extends React.HTMLAttributes<HTMLSpanElement> {\n  theme: SpanTheme;\n}\n","export const base = `\n    font-size: 15px;\n    color: red;\n`;\n","export const tba = `\n    font-family: Copperplate;\n    font-size: 60px;\n    color: black;\n    font-weight: 600;\n    width: fit-content;\n    display: inline-table;\n    width: 40vw;\n    border-bottom: solid 2px #e0bb00;\n\n    @media only screen and (max-width: 605px) {\n        font-size: 40px;\n      }\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { SpanProps, SpanTheme, ThemeSelector } from \"./types\";\n\nconst ThemedSpan = styled.span`\n  ${(props: SpanProps) => ThemeSelector[props.theme]}\n`;\n\nexport const Span = (props: SpanProps) => {\n  return <ThemedSpan {...props}>{props.children}</ThemedSpan>;\n};\n\nSpan.defaultProps = {\n  theme: SpanTheme.DEFAULT\n};\n","import React from \"react\";\nimport styled from \"styled-components\";\n\n// TODO: abstract as atom\nconst StyledButton = styled.button`\n  height: 40px;\n  background: transparent;\n  font-size: 18px;\n  border: none;\n  border-left: solid 2px black;\n  border-right: solid 2px black;\n  border-radius: 10px;\n  cursor: pointer;\n\n  :hover {\n    transition: all 0.5s;\n    border-left: solid 2px #e0bb00;\n    border-right: solid 2px #e0bb00;\n    color: #878787;\n  }\n`;\nconst Button = (props: React.HTMLAttributes<HTMLButtonElement>) => {\n  return <StyledButton {...props}>{props.children}</StyledButton>;\n};\n\nconst NavContainer = styled.div`\n  width: 325px; //calc(100% - 20px);\n  height: 52px;\n  background-color: transparent;\n  margin-top: 20px;\n  border: solid 3px black;\n  border-radius: 10px;\n  display: inline-flex;\n  box-shadow: 0px 15px 15px 0px #cfcfcf;\n`;\n\nconst ButtonListContainer = styled.div`\n  width: 100%;\n  display: inline-flex;\n  justify-content: space-evenly;\n  align-items: center;\n`;\n\nexport const NavigationBar = () => {\n  // TO DO: Abstract as molecule\n  const buttonList = [\n    <Button>Home</Button>,\n    <Button\n      onClick={() => {\n        window.location.href =\n          \"https://www.linkedin.com/in/robert-mercado-30801990/\";\n      }}\n    >\n      Linked In\n    </Button>,\n    <Button\n      onClick={() => {\n        window.location.href = \"https://github.com/DarkseidOmega/\";\n      }}\n    >\n      Github\n    </Button>\n  ];\n\n  return (\n    <NavContainer>\n      <ButtonListContainer>{buttonList}</ButtonListContainer>\n    </NavContainer>\n  );\n};\n","export enum Route {\n  ROOT = \"\",\n  HOME = \"/\"\n}\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { Span } from \"../../atoms\";\nimport { SpanTheme } from \"../../atoms/text/Span/types\";\nimport { NavigationBar } from \"../../organisms\";\nimport { Route } from \"../../constants\";\n\n// TO DO: Abstract this\nconst HomeBase = styled.div`\n  height: 100%;\n  width: 100%;\n  background-color: white;\n  background-size: cover;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;\n\nconst StyledImg = styled.div`\n  height: calc(100vh - 120px);\n  background-size: cover !important;\n  background-repeat: no-repeat !important;\n  width: 50vw;\n  background: url(${Route.ROOT}/bestest.jpg);\n  border-top-left-radius: 150px;\n  border-bottom-left-radius: 150px;\n`;\n\nconst Body = styled.div`\n  padding-top: 30px;\n  display: flex;\n  flex-driection: row;\n  justify-content: space-between;\n  width: 100%;\n`;\n\nexport const Home = () => {\n  return (\n    <HomeBase>\n      <NavigationBar />\n      <Body>\n        <div\n          style={{\n            width: \"50vw\",\n            display: \"flex\",\n            flexDirection: \"column\",\n            alignItems: \"center\",\n            paddingTop: \"50px\"\n          }}\n        >\n          <Span theme={SpanTheme.TBA}>Robert Mercado </Span>\n          <span\n            style={{\n              fontSize: \"20px\",\n              color: \"#878787\",\n              fontFamily: \"Copperplate\",\n              marginTop: \"5px\",\n              fontWeight: 100\n            }}\n          >\n            Software Engineer | Cook | Bourbon Drinker | Sexy Man\n          </span>\n          <span style={{ marginTop: \"50px\" }}>I'm working on it...</span>\n        </div>\n        <StyledImg />\n      </Body>\n    </HomeBase>\n  );\n};\n","import React from \"react\";\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\n\nimport \"./App.css\";\nimport { Home } from \"./pages\";\nimport { Route as RoutePath } from \"./constants\";\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <div className=\"App\">\n        <Switch>\n          <Route exact path={RoutePath.HOME}>\n            <Home />\n          </Route>\n        </Switch>\n      </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}